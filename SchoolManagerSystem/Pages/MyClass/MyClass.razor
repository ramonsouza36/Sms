@page "/myclass"
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using SchoolManagerSystem.Models;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using SchoolManagerSystem.Pages.Components
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ClassStudentService ClassStudentService;
@inject InstructorsService InstructorsService;
@inject UserService UserService;
@inject NavigationManager navManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync;
<AuthorizeView Roles="Instrutor">
    <Authorized>
        <div class="container-fluid ps-0">
            <h3>Minhas Turmas</h3>
        </div>
        <div class="container-fluid">
            <div class="row col-md-12 d-md-inline-flex">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Curso</th>
                            <th>Data de Início</th>
                            <th>Data de Término</th>
                            <th>
                                <div class="divBotoes">
                                    Opções
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (classrooms is not null)
                        {
                            foreach(var item in classrooms)
                            {
                                <tr>
                                    <td>@item.NameCourse</td>
                                    <td>@item.StartDate</td>
                                    <td>@item.EndDate</td>
                                    <td>
                                        <div class="divBotoes">
                                            <a title="Ver alunos" class="btn btn-secondary text-center" role="button" data-bs-toggle="button" aria-pressed="true" @onclick="(() => showStudents(item.Id))">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a title="Excluir" class="btn btn-danger text-center" role="button" data-bs-toggle="button" aria-pressed="true">
                                                <i class="fas fa-trash-alt"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @{
            navManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>
@code{
    [Parameter]
    public Guid? id { get; set; }
    public List<ClassStudent>? classrooms { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var authUser = authstate.User;
        var name = authUser.Identity!.Name;
        var users = await UserService.GetUserByUserNameAsync(DbFactory,name!);
        var instructors = await InstructorsService.GetInstructorsAsync(DbFactory);
        var instructor = instructors.FirstOrDefault(s => s.Email == users.Email);
        classrooms = await ClassStudentService.GetClassStudentAsync(DbFactory);
        classrooms = classrooms.Where( a => a.InstructorId == instructor.Id).ToList();
    }

    public void showStudents(Guid id)
    {
       navManager.NavigateTo($"/mystudents/{id}"); 
    }
}
