@page "/classStudentadd"
@page "/classStudentadd/{id:guid}"
@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ClassStudentService ClassStudentService;
@inject CourseService CourseService;
@inject InstructorsService InstructorsService;
@inject NavigationManager navManager;
@using SchoolManagerSystem.Pages.Components

<PageTitle>Course</PageTitle>

<div class="container-fluid">
    <h3>Turma</h3>
</div>
<div class="container-fluid mb-3">
    <div class="row col-md-12 d-md-inline-flex">
        <div class="col-md-4">
            <label class="label">Nome do curso</label>
            <select class="form-select col-md-4 me-2" type="text" placeholder="Nome Curso" @bind = "CourseId">
                <option value="">Selecione o curso....</option>
                @if(course != null)
                {
                    foreach(var item in course!)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="label">Nome do professor</label>
            <select class="form-select col-md-4 me-2" type="text" placeholder="Nome Curso" @bind = "InstructorId" >
                <option value="">Selecione o professor....</option>
                @if(instructors != null)
                {
                    foreach(var item in instructors!)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="label">Carga horária</label>
            <input class="form-control border-secondary col-md-4 me-2" type="number" placeholder="Carga horária" @bind-value="@WorkLoad"/>
        </div>
    </div>
    <div class="row col-md-12 mt-3 d-md-inline-flex">
        <div class="col-md-6">
            <label class="label">Data de início</label>
            <input type="date" class="form-control col-md-6" placeholder="Data início">
        </div>
        <div class="col-md-6">
            <label class="label">Data de término</label>
            <input type="date" class="form-contro col-md-6l" placeholder="Data término">
        </div>
    </div>
    <div class="mt-3">
        <button type="button" class="btn btn-primary" @onclick = "(() => SetCourse())">Salvar</button>
        <button type="button" class="btn btn-secondary">Cancelar</button>
    </div>
</div>

<Toast ClassToast="@ClassToast" Message="@Message" Status="@Status"/>
            

@code{
    [Parameter]
    public Guid? id { get; set; }
    public Guid CourseId = Guid.Empty;
    public Guid InstructorId = Guid.Empty;
    public int WorkLoad = 0;
    public List<Course>? course { get; set; }
    public List<Instructor>? instructors { get; set; }
    public string ClassToast { get; set; } = "toast hide";
    public string Message = string.Empty;
    public string Status = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        course = await CourseService.GetCourseAsync(DbFactory);
        instructors = await InstructorsService.GetInstructorsAsync(DbFactory);
        if(id.HasValue)
        {
            var classStudent = await ClassStudentService.GetClassStudentByIdAsync(DbFactory,id.Value);
            if(classStudent != null)
            {
                CourseId = classStudent.CourseId;
                InstructorId = classStudent.InstructorId;
                WorkLoad = classStudent!.WorkLoad!;
            }
        }
    }

    public async Task SetCourse()
    {
        using var context = DbFactory.CreateDbContext();
        var classStudent = new ClassStudent();
        classStudent.CourseId = CourseId;
        classStudent.InstructorId = InstructorId;
        classStudent.WorkLoad = WorkLoad;
        
        if(!id.HasValue)
            await ClassStudentService.SetClassStudentAsync(DbFactory,classStudent);
        else
        {
            classStudent.Id = id.Value;
            await ClassStudentService.UpdateClassStudentAsync(DbFactory, classStudent);
        }

        var message = "Cadastro realizado com sucesso!";
        var status = "bg-success text-white";
        await ShowToast(message, status);
        navManager.NavigateTo($"/classStudent", true);
    }

    public async Task ShowToast(string message, string status)
    {
        Message = message;
        Status = status;
        ClassToast = "toast show";
        await Task.Delay(3000);
        ClassToast = "toast hide";
        StateHasChanged();
    }
}