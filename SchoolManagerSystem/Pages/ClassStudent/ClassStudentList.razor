@page "/classStudent"

@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Pages.Components
@using SchoolManagerSystem.Services;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager navManager;
@inject ClassStudentService ClassStudentService;

<div>
    <a href="classStudentadd" class="btn btn-primary active mb-3 text-center" role="button" data-bs-toggle="button" aria-pressed="true">
        <i class="fas fa-plus"> Adicionar</i>
    </a>
</div>
<div class="container-fluid">
    <div class="row col-md-12 d-md-inline-flex">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Curso</th>
                    <th>Professor</th>
                    <th>Carga horária</th>
                    <th>
                        <div class="divBotoes">
                            Opções
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (classStudents is not null)
                {
                    foreach(var item in classStudents)
                    {
                        <tr>
                            <td>@item.NameCourse</td>
                            <td>@item.NameInstr</td>
                            <td>@item.WorkLoad</td>
                            <td>
                                <div class="divBotoes">
                                    <a title="Editar" class="btn btn-secondary" role="button" data-bs-toggle="button" aria-pressed="true" @onclick="(() => showCourse(item.Id))">
                                        <i class="fas fa-pencil-alt"></i>
                                    </a>
                                    <a title="Excluir" class="btn btn-danger" role="button" data-bs-toggle="button" aria-pressed="true" @onclick="(() => deleteCourse(item.Id))">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div>
            <Toast ClassToast="@ClassToast" Message="Teste de mensagem" Status="bg-danger text-white"/>
            <button type="button" class="btn btn-primary" @onclick="(() => ShowToast())">Show live toast</button>
        </div>
    </div>
</div>

@code{
    List<ClassStudent>? classStudents { get; set;}
    
    public string ClassToast { get; set; } = "toast hide";
    protected override async Task OnInitializedAsync()
    {
        classStudents = await ClassStudentService.GetClassStudentAsync(DbFactory);
    }

    public void showCourse(Guid id)
    {
        navManager.NavigateTo($"classStudentadd/{id}");
    }
    public async Task deleteCourse(Guid id)
    {
        await ClassStudentService.DeleteClassStudentAsync(DbFactory, id);
        navManager.NavigateTo($"classStudent", true);
    }

    public async void ShowToast()
    {
        ClassToast = "toast show";
        await Task.Delay(3000);
        ClassToast = "toast hide";
        StateHasChanged();
    }

}