@page "/instructorsadd"
@page "/instructorsadd/{id:guid}"
@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager navManager;
@inject InstructorsService InstructorsService;

<PageTitle>Instructors</PageTitle>

<div class="container-fluid">
    <h3>Professores</h3>
</div>
<div class="container-fluid">
    <div class="row col-md-12 d-md-inline-flex">
        <input class="form-control border-secondary col-md-4 me-2" type="text" placeholder="Nome" @bind-value="@Name"/>
        <input class="form-control border-secondary col-md-4 me-2" type="text" placeholder="Email" @bind-value="@Email"/>
        <input class="form-control border-secondary col-md-4 me-2" type="number" placeholder="Carga horária" @bind-value="@HourlyCost"/>
    </div>
    <div class="row mt-3">
        <textarea class="mb-5 lh-md" rows = "5" placeholder="Certificações" @bind="@Certications"></textarea>
    </div>
</div>
<div>
    <button type="button" class="btn btn-primary" @onclick = "(() => SetInstructors())">Salvar</button>
    <button type="button" class="btn btn-secondary">Cancelar</button>
</div>

@code{
    public string Name = "";
    public string Email = "";
    public int HourlyCost = 0;
    public string Certications = "";

    [Parameter]
    public Guid? id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(id.HasValue)
        {
            var instructor = await InstructorsService.GetInstructorsByIdAsync(DbFactory,id.Value);
            if(instructor != null)
            {
                Name = instructor!.Name!;
                Email = instructor!.Email!;
                HourlyCost = instructor.HourlyCost;
                Certications = instructor!.Certications!;
            }
        }
    }

    public async Task SetInstructors()
    {
        var instructor = new Instructor();
        instructor.Name = Name;
        instructor.Email = Email;
        instructor.HourlyCost = HourlyCost;
        instructor.Certications = Certications;

        await InstructorsService.SetInstructorAsync(DbFactory, instructor);
        navManager.NavigateTo($"/courses", true);   
    }

}