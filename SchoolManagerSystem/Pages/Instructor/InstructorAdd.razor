@page "/instructorsadd"
@page "/instructorsadd/{id:guid}"
@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using SchoolManagerSystem.Pages.Components;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager navManager;
@inject InstructorsService InstructorsService;

<PageTitle>Instructors</PageTitle>
<AuthorizeView Roles="Administrativo,Administrador">
    <Authorized>
        <div class="container-fluid">
            <h3>Professores</h3>
        </div>
        <div class="container-fluid">
            <div class="row col-md-12 d-md-inline-flex">
                <div class="col-md-4">
                    <label class="label">Nome do professor</label>
                    <input class="form-control border-secondary col-md-4" type="text" placeholder="Nome" @bind-value="@Name"/>
                </div>
                <div class="col-md-4">
                    <label class="label">Email</label>
                    <input class="form-control border-secondary col-md-4" type="text" placeholder="Email" @bind-value="@Email"/>
                </div>
                <div class="col-md-4">
                    <label class="label">Telefone</label>
                    <input class="form-control border-secondary col-md-4" type="number" placeholder="Telefone" @bind-value="@PhoneNumber"/>
                </div>
            </div>
            <div class="row mt-3">
                <label class="label">Qualificações</label>
                <textarea class="mb-5 lh-md" rows = "5" placeholder="Certificações" @bind="@Certications"></textarea>
            </div>
            <div class="mt-3">
                <button type="button" class="btn btn-primary" @onclick = "(() => SetInstructors())">Salvar</button>
                <button type="button" class="btn btn-secondary">Cancelar</button>
            </div>
        </div>
</Authorized>
    <NotAuthorized>
        @{
            navManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

<Toast ClassToast="@ClassToast" Message="@Message" Status="@Status"/>

@code{
    public string Name = "";
    public string Email = "";
    public string PhoneNumber = "";
    public string Certications = "";
    public string ClassToast { get; set; } = "toast hide";
    public string Message = string.Empty;
    public string Status = string.Empty;

    [Parameter]
    public Guid? id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(id.HasValue)
        {
            var instructor = await InstructorsService.GetInstructorsByIdAsync(DbFactory,id.Value);
            if(instructor != null)
            {
                Name = instructor!.Name!;
                Email = instructor!.Email!;
                PhoneNumber = instructor!.PhoneNumber!;
                Certications = instructor!.Certications!;
            }
        }
    }

    public async Task SetInstructors()
    {
        var instructor = new Instructor();
        instructor.Name = Name;
        instructor.Email = Email;
        instructor.PhoneNumber = PhoneNumber;
        instructor.Certications = Certications;

        if(!id.HasValue)
            await InstructorsService.SetInstructorAsync(DbFactory, instructor);
        else
        {
            instructor.Id = id.Value;
            await InstructorsService.UpdateInstructorAsync(DbFactory, instructor);
        }

        var message = "Cadastro realizado com sucesso!";
        var status = "bg-success text-white";
        await ShowToast(message, status);
        navManager.NavigateTo($"/instructors", true);   
    }

    public async Task ShowToast(string message, string status)
    {
        Message = message;
        Status = status;
        ClassToast = "toast show";
        StateHasChanged();
        await Task.Delay(3000);
        ClassToast = "toast hide";
    }

}