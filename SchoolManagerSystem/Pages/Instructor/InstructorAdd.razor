@page "/instructorsadd"
@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Instructors</PageTitle>

<div class="container-fluid">
    <h3>Professores</h3>
</div>
<div class="container-fluid">
    <div class="row col-md-12 d-md-inline-flex">
        <input class="form-control border-secondary col-md-4 me-2" type="text" placeholder="Nome" @bind-value="@Name"/>
        <input class="form-control border-secondary col-md-4 me-2" type="text" placeholder="Email" @bind-value="@Email"/>
        <input class="form-control border-secondary col-md-4 me-2" type="number" placeholder="Carga horária" @bind-value="@HourlyCost"/>
    </div>
    <div class="row mt-3">
        <textarea class="mb-5 lh-md" rows = "5" placeholder="Certificações" @bind="@Certications"></textarea>
    </div>
</div>
<div>
    <button type="button" class="btn btn-primary" @onclick = "(() => SetInstructors())">Salvar</button>
    <button type="button" class="btn btn-secondary">Cancelar</button>
</div>

@code{
    public string Name = "";
    public string Email = "";
    public int HourlyCost = 0;
    public string Certications = "";

    //Instructor? instructor { get; set;}


    /*protected override async Task OnInitializedAsync()
    {
        instructor = await GetInstructors();
        //return base.OnInitializedAsync();
    }*/

    public async Task SetInstructors()
    {
        using var context = DbFactory.CreateDbContext();
        var instructor = new Instructor();
        instructor.Name = Name;
        instructor.Email = Email;
        instructor.HourlyCost = HourlyCost;
        instructor.Certications = Certications;
        instructor.Id = Guid.NewGuid();
        //await context.S
        if(instructor is not null && instructor.Id != Guid.Empty)
            context.Instructor.Add(instructor);
        Console.WriteLine($"{instructor!.Name}");
        await context.SaveChangesAsync();
    }

}