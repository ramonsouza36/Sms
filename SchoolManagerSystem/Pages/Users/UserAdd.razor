@page "/useradd"
@page "/useradd/{id:guid}"
@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using System;
@using System.Text;
@using System.Security.Cryptography;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager navManager;
@inject UserService UserService;
@inject RoleService RoleService;

<PageTitle>Users</PageTitle>

<div class="container-fluid">
    <h3>Usu치rios</h3>
</div>
<div class="container-fluid">
    <div class="row col-md-12 d-md-inline-flex">
        <div class="col-md-3">
            <label class="label">Nome do usu치rio</label>
            <input class="form-control border-secondary col-md-3" type="text" placeholder="Nome usu치rio" @bind-value="@UserName"/>
        </div>
        <div class="col-md-3">
            <label class="label">Senha</label>
            <div class="input-group align-items-center">
                <input type="@Type" class="form-control border-secondary col-md-3" @bind-value = "@Password" placeholder="Senha"/>
                <button class="btn btn-secondary text-white" @onclick="(() => changeType())"><i class="@Class"></i></button>
            </div>        </div>
        <div class="col-md-3">
            <label class="label">Confirmar senha</label>
            <div class="input-group align-items-center">
                <input type="@TypeConfirmation" class="form-control border-secondary col-md-3" @bind-value = "@PasswordConfirmation" placeholder="Senha"/>
                <button class="btn btn-secondary text-white" @onclick="(() => changeTypeConfirmation())"><i class="@ClassConfirmation"></i></button>
            </div>   
        </div>
        <div class="col-md-3">
            <label class="label">Email</label>
            <input class="form-control border-secondary col-md-3" type="text" placeholder="Telefone" @bind-value="@Email"/>
        </div>
    </div>
    <div class="row col-md-12 d-md-inline-flex">
        <div class="col-md-3">
            <label class="label">Tipo de usu치rio</label>
            <select class="form-select border-secondary col-md-4 me-2" type="text" placeholder="Nome Curso" @bind = "typeId">
                <option value=@Guid.Empty>Selecione o tipo....</option>
                @if(roles != null)
                {
                    foreach(var item in roles!)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="mt-3">
        <button type="button" class="btn btn-primary" @onclick="(() => SetUser())">Salvar</button>
        <button type="button" class="btn btn-secondary">Cancelar</button>
    </div>
</div>

@code{
    public string UserName = "";
    public string Password = "";
    public string PasswordConfirmation = "";
    public string Email = "";
    public string Type = "password";
    public string TypeConfirmation = "password";
    public string Class = "fas fa-eye";
    public string ClassConfirmation = "fas fa-eye";
    [Parameter]
    public Guid? id { get; set; }

    public Guid typeId = Guid.Empty;

    public List<IdentityRole>? roles;

    protected override async Task OnParametersSetAsync()
    {
        if(id != Guid.Empty|| id is not null)
        {
            var user = await UserService.GetUserByIdAsync(DbFactory,id!.ToString()!);
            if(user != null)
            {
                UserName = user!.UserName!;
                Email = user!.Email!;
            }
        }
        roles = await RoleService.GetRolesAsync(DbFactory);
    }

    private void changeType()
    {
        if(Type == "password")
        {
            Type = "text";
            Class = "fas fa-eye-slash";
        }
        else
        {
            Type = "password";
            Class = "fas fa-eye";
        }
    }

    private void changeTypeConfirmation()
    {
        if(TypeConfirmation == "password")
        {
            TypeConfirmation = "text";
            ClassConfirmation = "fas fa-eye-slash";
        }
        else
        {
            TypeConfirmation = "password";
            ClassConfirmation = "fas fa-eye";
        }
    }

    private async Task SetUser()
    {
        if(id != Guid.Empty|| id is not null)
        {
            var user = await UserService.GetUserByIdAsync(DbFactory, id.ToString());
            await UserService.UpdateUserAsync(DbFactory, user.Id, Password, typeId);
        }
        else
        {
            var User = new IdentityUser();
            User.UserName = UserName;
            User.NormalizedUserName = UserName.ToUpper();
            User.Email = Email;
            User.NormalizedEmail = Email.ToUpper();
            await UserService.SetUserAsync(DbFactory, User, Password, typeId);
        }
        navManager.NavigateTo($"users", true);
    }
}