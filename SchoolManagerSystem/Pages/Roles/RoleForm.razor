@page "/roles"
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using SchoolManagerSystem.Models;
@using System.Linq;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject RoleService RoleService;
@inject NavigationManager navManager;
@using SchoolManagerSystem.Pages.Components

<PageTitle>Plate</PageTitle>

<div class="container-fluid">
    <h3>Papel</h3>
</div>
<div class="container-fluid mb-3">
    <div class="row col-md-12">
        <div>
            <label class="label">Nome do papel</label>
            <input type="text" class="form-control col-md-10 mt-0" placeholder="Nome Papel" @bind-value="nameRole"> 
        </div>
        <div class="col-md-2">
            <button type="button" class="btn btn-primary" @onclick="(() => SetRole())">Salvar</button>
        </div>
    </div>
    <div class="row col-md-12 d-md-inline-flex">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>
                        <div class="divBotoes">
                            Opções
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (roles is not null)
                {
                    foreach(var item in roles)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>
                                <div class="divBotoes">
                                    <a title="Excluir" class="btn btn-danger text-right float-right" role="button" data-bs-toggle="button" aria-pressed="true" @onclick="(() => DeleteRole(item.Id))">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code{

    public string nameRole = string.Empty;

    List<IdentityRole>? roles {get; set; }

    protected override async Task OnParametersSetAsync()
    {
        roles = await RoleService.GetRolesAsync(DbFactory);
    }

    private async Task SetRole()
    {
        if(!string.IsNullOrEmpty(nameRole) && !string.IsNullOrWhiteSpace(nameRole))
            await RoleService.SetRoleAsync(DbFactory,nameRole);           
        navManager.NavigateTo($"/roles", true);  
    }

    private async Task DeleteRole(string id)
    {
        await RoleService.DeleteRoleAsync(DbFactory,id);
        navManager.NavigateTo($"/roles", true);
    }
}