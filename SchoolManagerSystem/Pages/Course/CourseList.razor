@page "/courses"

@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager navManager;
@inject CourseService CourseService;

<div>
    <a href="coursesadd" class="btn btn-primary active mb-3 text-center" role="button" data-bs-toggle="button" aria-pressed="true">
        <i class="fas fa-plus"> Adicionar</i>
    </a>
</div>
<div class="container-fluid">
    <div class="row col-md-12 d-md-inline-flex">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Nome</th>
                    <th>Mensalidade</th>
                    <th>
                        <div class="divBotoes">
                            Opções
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (course is not null)
                {
                    foreach(var item in course)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Price</td>
                            <td>
                                <div class="divBotoes">
                                    <a title="Editar" class="btn btn-secondary text-right float-right" role="button" data-bs-toggle="button" aria-pressed="true" @onclick="(() => showCourse(item.Id))">
                                        <i class="fas fa-pencil-alt"></i>
                                    </a>
                                    <a title="Excluir" class="btn btn-danger text-right float-right" role="button" data-bs-toggle="button" aria-pressed="true" @onclick="(() => deleteCourse(item.Id))">
                                        <i class="fas fa-trash-alt"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code{
List<Course>? course { get; set;}


    protected override async Task OnInitializedAsync()
    {
        course = await CourseService.GetCourseAsync(DbFactory);
    }

    public void showCourse(Guid id)
    {
        navManager.NavigateTo($"coursesadd/{id}");
    }
    public async Task deleteCourse(Guid id)
    {
        await CourseService.DeleteCourseAsync(DbFactory, id);
        navManager.NavigateTo($"courses", true);
    }
}