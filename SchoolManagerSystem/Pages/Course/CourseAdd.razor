@page "/coursesadd"
@page "/coursesadd/{id:guid}"
@using SchoolManagerSystem.Models;
@using SchoolManagerSystem.Data;
@using SchoolManagerSystem.Services;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject CourseService CourseService;
@inject NavigationManager navManager;

<PageTitle>Course</PageTitle>

<div class="container-fluid">
    <h3>Cursos</h3>
</div>
<div class="container-fluid">
    <div class="row col-md-12 d-md-inline-flex">
        <input class="form-control border-secondary col-md-3 me-2" type="text" placeholder="Nome" @bind-value="@Name"/>
        <input class="form-control border-secondary col-md-3 me-2" type="text" placeholder="Requerimento" @bind-value="@Requirement"/>
        <input class="form-control border-secondary col-md-2 me-2" type="number" placeholder="Carga horária" @bind-value="@WorkLoad"/>
        <input class="form-control border-secondary col-md-2" type="number" placeholder="Preço" @bind-value="@Price"/>
    </div>
</div>
<div>
    <button type="button" class="btn btn-primary" @onclick = "(() => SetCourse())">Salvar</button>
    <button type="button" class="btn btn-secondary">Cancelar</button>
</div>

@code{
    public string Name = "";
    public string Requirement = "";
    public int WorkLoad = 0;
    public double Price = 0;

    [Parameter]
    public Guid? id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(id.HasValue)
        {
            var course = await CourseService.GetCoursesByIdAsync(DbFactory,id.Value);
            if(course != null)
            {
                Name = course!.Name!;
                Requirement = course!.Requirement!;
                WorkLoad = course!.WorkLoad!;
                Price = course!.Price!;
            }
        }
    }

    public async Task SetCourse()
    {
        using var context = DbFactory.CreateDbContext();
        var course = new Course();
        course.Name = Name;
        course.Requirement = Requirement;
        course.WorkLoad = WorkLoad;
        course.Price = Price;

        if(!id.HasValue)
            await CourseService.SetCourseAsync(DbFactory,course);
        else
        {
            course.Id = id.Value;
            await CourseService.UpdateCourseAsync(DbFactory, course);
        }
        navManager.NavigateTo($"/courses", true);
    }

}